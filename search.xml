<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>openCV学习日记-Day3-图像增强之直方图变换与滤波</title>
      <link href="/posts/1ea2304a.html"/>
      <url>/posts/1ea2304a.html</url>
      
        <content type="html"><![CDATA[<p><img src="/openCV%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-Day3-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E4%B9%8B%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%8F%98%E6%8D%A2%E4%B8%8E%E6%BB%A4%E6%B3%A2%5Cassignment3%5CSource_Image%5Cspecfication%5Csource.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> openCV学习日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openCV学习日记-Day2-基本运算与卷积</title>
      <link href="/posts/3f4d80ea.html"/>
      <url>/posts/3f4d80ea.html</url>
      
        <content type="html"><![CDATA[<h2 id="任务一：理解图像的算术运算"><a href="#任务一：理解图像的算术运算" class="headerlink" title="任务一：理解图像的算术运算"></a>任务一：理解图像的算术运算</h2><h3 id="1-图像加法实现图像降噪"><a href="#1-图像加法实现图像降噪" class="headerlink" title="1.图像加法实现图像降噪"></a>1.图像加法实现图像降噪</h3><p>用相机连拍产生的噪声为互不相干的加性噪声，且均值为0。对多幅连拍图像相加取平均，可以消除噪声。</p><p><a href="https://imgse.com/i/pEa3yod"><img src="https://s21.ax1x.com/2025/03/14/pEa3yod.png" alt="pEa3yod.png"></a></p><center> 图(1)ISO32000下拍出的照片 </center><p><a href="https://imgse.com/i/pEa3BLD"><img src="https://s21.ax1x.com/2025/03/14/pEa3BLD.png" alt="pEa3BLD.png"></a>  原照片的ISO达到了32000，放大后可以看到产生了很可观的噪点。</p><h4 id="Python代码实现："><a href="#Python代码实现：" class="headerlink" title="Python代码实现："></a>Python代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 加载图像</span></span><br><span class="line">image1 = cv2.imread(<span class="string">r&#x27;assignment2\add\noise (1).JPG&#x27;</span>)  <span class="comment"># 使用相对路径加载图像</span></span><br><span class="line"><span class="keyword">if</span> image1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图像加载失败，请检查文件路径。&quot;</span>)</span><br><span class="line">exit()</span><br><span class="line">（此处省略<span class="number">9</span>次图像载入）</span><br><span class="line">noise = [image1, image2, image3, image4, image5, image6, image7, image8, image9, image10]   <span class="comment"># 创建图像列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 灰度化处理</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    noise[i] = cv2.cvtColor(noise[i], cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 图像降低亮度防止相加后过曝</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    noise[i] = cv2.divide(noise[i], <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 图像相加降噪</span></span><br><span class="line">add_img1 = cv2.add(noise[<span class="number">0</span>], noise[<span class="number">1</span>])</span><br><span class="line">add_img2 = cv2.add(noise[<span class="number">2</span>], noise[<span class="number">3</span>])</span><br><span class="line">add_img3 = cv2.add(noise[<span class="number">4</span>], noise[<span class="number">5</span>])</span><br><span class="line">add_img4 = cv2.add(noise[<span class="number">6</span>], noise[<span class="number">7</span>])</span><br><span class="line">add_img5 = cv2.add(noise[<span class="number">8</span>], noise[<span class="number">9</span>])</span><br><span class="line">Add_img1 = cv2.add(add_img1, add_img2)</span><br><span class="line">Add_img2 = cv2.add(add_img3, add_img4)</span><br><span class="line">Add_img3 = cv2.add(Add_img1, Add_img2)</span><br><span class="line">Add_img = cv2.add(Add_img3, add_img5)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Source Image&#x27;</span>, cv2.multiply(noise[<span class="number">0</span>], <span class="number">10</span>))</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Add Image&#x27;</span>, Add_img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待用户按键后关闭所有窗口</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows() </span><br></pre></td></tr></table></figure><center class="half">    <img src="https://s21.ax1x.com/2025/03/14/pEa3sdH.png" width="500" />      <center> 图(2) 原图 </center></center><center class="half">    <img src="https://s21.ax1x.com/2025/03/14/pEa3ree.png" width="500" />    <center> 图(3) 相加后的图像 </center></center><br><br><center class="half">    <img src="https://s21.ax1x.com/2025/03/14/pEa30sO.png"/>    <center> 图(4)  原图局部放大 </center></center><center class="half">    <img src="https://s21.ax1x.com/2025/03/14/pEa3wQK.png"/>    <center> 图(5)  相加后图片局部放大 </center></center><br><br><p>将图像放大后可以清楚地发现照片的噪点被降低了,</p><h4 id="每一根毛都看得清清楚楚-bushi"><a href="#每一根毛都看得清清楚楚-bushi" class="headerlink" title="每一根毛都看得清清楚楚(bushi"></a>每一根毛都看得清清楚楚(bushi</h4>]]></content>
      
      
      <categories>
          
          <category> openCV学习日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openCV学习日记-Day1-基本操作</title>
      <link href="/posts/45686756.html"/>
      <url>/posts/45686756.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h2 id="1-加载图像"><a href="#1-加载图像" class="headerlink" title="1. 加载图像"></a>1. 加载图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 加载图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;assignment1/SourceImage.jpg&#x27;</span>)  <span class="comment"># 使用相对路径加载图像</span></span><br><span class="line"><span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图像加载失败，请检查文件路径。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 防止图片分辨率比屏幕大，屏幕显示不全，这里改变图像分辨率为1280x720</span></span><br><span class="line">new_width = <span class="number">1280</span>  <span class="comment"># 新的宽度</span></span><br><span class="line">new_height = <span class="number">720</span>  <span class="comment"># 新的高度</span></span><br><span class="line">resized_image = cv2.resize(image, (new_width, new_height))</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Resized Image&#x27;</span>, resized_image)  <span class="comment"># 显示调整大小后的原始图像</span></span><br></pre></td></tr></table></figure><h2 id="2-显示图像基本信息"><a href="#2-显示图像基本信息" class="headerlink" title="2.显示图像基本信息"></a>2.显示图像基本信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 显示图像的基本信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;图像尺寸：<span class="subst">&#123;resized_image.shape[<span class="number">1</span>]&#125;</span>x<span class="subst">&#123;resized_image.shape[<span class="number">0</span>]&#125;</span>, 图像通道数：<span class="subst">&#123;resized_image.shape[<span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(resized_image.shape[<span class="number">2</span>] == <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RGB彩色图像&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;灰度(单通道图像)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像的矩阵表示：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resized_image)</span><br></pre></td></tr></table></figure><h2 id="3-灰度化"><a href="#3-灰度化" class="headerlink" title="3.灰度化"></a>3.灰度化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 灰度化</span></span><br><span class="line">gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Gray Image&#x27;</span>, gray_image)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;灰度图像的矩阵表示：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(gray_image) </span><br></pre></td></tr></table></figure><h2 id="4-图像切割"><a href="#4-图像切割" class="headerlink" title="4.图像切割"></a>4.图像切割</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cropped_image = resized_image[<span class="number">200</span>:<span class="number">300</span>, <span class="number">500</span>:<span class="number">700</span>]  <span class="comment"># 截取画面中的一块区域</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Cropped Image&#x27;</span>, cropped_image)</span><br></pre></td></tr></table></figure><h2 id="5-尝试更精确切割一个图像中的物体"><a href="#5-尝试更精确切割一个图像中的物体" class="headerlink" title="5.尝试更精确切割一个图像中的物体"></a>5.尝试更精确切割一个图像中的物体</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 使用轮廓绘制功能，提取前景对象。</span></span><br><span class="line">    <span class="comment"># 将函数 cv2.drawContours()的第四个参数thickness 的值设置为“-1”，可以绘制前景对象的实心轮廓。</span></span><br><span class="line">    <span class="comment"># 将该实心轮廓与原始图像进行“按位与”操作，即可将前景对象从原始图像中提取出来。</span></span><br><span class="line">ret, binary = cv2.threshold(gray_image, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)    <span class="comment"># 二值化处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找图像轮廓(一开始这里多加了一个返回值，导致报错，后来发现是因为新版本的cv2.findContours()函数的返回值是两个，而非三个</span></span><br><span class="line">contours, hierarchy = cv2.findContours(binary, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line">repli_image = resized_image.copy()                                          <span class="comment"># 复制原图</span></span><br><span class="line">cv2.drawContours(repli_image, contours, -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)                 <span class="comment"># 在复制的原图上把轮廓描出来</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;contours&quot;</span>, repli_image)                                         <span class="comment"># 显示绘制的轮廓</span></span><br><span class="line"></span><br><span class="line">mask = np.zeros(resized_image.shape, np.uint8)                                <span class="comment"># 创建一个空白的掩码  </span></span><br><span class="line">mask = cv2.drawContours(mask, contours, -<span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), -<span class="number">1</span>)              <span class="comment"># 绘制填充后的轮廓     </span></span><br><span class="line">grabbed_image = cv2.bitwise_and(resized_image, mask)                          <span class="comment"># 将原图与mask进行“按位与”操作，提取前景对象</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;grabbed_image&quot;</span>, grabbed_image)</span><br></pre></td></tr></table></figure><h2 id="6-保存处理后的图像"><a href="#6-保存处理后的图像" class="headerlink" title="6.保存处理后的图像"></a>6.保存处理后的图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">saved = cv2.imwrite(<span class="string">&#x27;cropped_image.jpg&#x27;</span>, cropped_image)  <span class="comment"># 保存切割后的图像</span></span><br><span class="line"><span class="keyword">if</span> saved:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;切割后的图像已保存到当前工作目录下的 &#x27;crooped_image.jpg&#x27;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图像保存失败&quot;</span>)</span><br><span class="line">saved2 = cv2.imwrite(<span class="string">&#x27;grabbed_image.jpg&#x27;</span>, grabbed_image)  <span class="comment"># 保存切割后的图像</span></span><br><span class="line"><span class="keyword">if</span> saved2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;提取前景后的图像已保存到当前工作目录下的 &#x27;grabbed_image.jpg&#x27;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图像保存失败&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-等待用户按键后关闭所有窗口"><a href="#7-等待用户按键后关闭所有窗口" class="headerlink" title="7.等待用户按键后关闭所有窗口"></a>7.等待用户按键后关闭所有窗口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openCV学习日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人类智慧之光——写在第一台计算机诞生之日</title>
      <link href="/posts/91f68129.html"/>
      <url>/posts/91f68129.html</url>
      
        <content type="html"><![CDATA[<p>​<strong>1946年2月14日</strong>，当世界还沉浸在对和平的希冀中，一台名为ENIAC的庞然大物在美国宾夕法尼亚大学悄然点亮。它的诞生没有玫瑰与情诗，却以每秒5000次运算的”心跳”，为人类叩开了数字文明的大门。这一天，不仅是科技的诞辰，更是人类突破思维疆域、重塑世界图景的里程碑。</p><p>​ENIAC重达30吨，占地170平方米，一万八千根真空管如星火般闪烁，编织出最原始的二进制语言。它诞生于二战硝烟中，却将力量投向更辽阔的战场——用精确计算预测弹道轨迹，用理性之光消弭战争阴云。这台”电子大脑”的每一个开关跳动，都在证明：人类不仅能创造工具，更能赋予工具思考的使命。</p><p>​从真空管到晶体管，从巨型机到掌上终端，78载岁月里，计算机的进化史恰是人类智慧的拓荒史。它让阿波罗飞船登陆月球，让信息在光纤中奔流，让AI学会谱写诗歌，让微观世界的奥秘在量子比特中舒展。每一次代码的迭代，都是跨越时空的思想接力；每一代硬件的蜕变，都在重塑文明的表达方式。</p><p>​今天，当我们用指尖轻触屏幕，不应忘记那些在庞杂线路中埋首的身影。ENIAC的发明者们或许未曾预见，他们点燃的星火已成燎原之势——从深空探测到基因解码，从虚拟现实到脑机互联，计算机早已超越工具的定义，成为人类探索无限可能的镜像。</p><p>​在这个特别的日子，让我们以二进制代码书写敬意：致敬永不止息的探索精神，致敬理性与创造力的交响，致敬每个在0与1的世界里播种未来的人。愿这份诞生于情人节的智慧之光，永远照亮人类向真理求索的征程。</p><p><em><strong>–generated by deepseek-R1:14B–</strong></em></p><p>附上12种语言书写的”Hello World!”</p><p><strong>1. Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. C</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>4. C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;\nHello World&quot;</span>&lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. C#</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">helloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6. Visual Basic .NET</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Module HelloWorld</span><br><span class="line">   Sub Main( )</span><br><span class="line">      <span class="keyword">System</span>.Console.WriteLine(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">   <span class="keyword">End</span> Sub</span><br><span class="line"><span class="keyword">End</span> Module</span><br></pre></td></tr></table></figure><p><strong>7. JavaScript</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>8. PHP</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// In PHP, we use echo to print text</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  <span class="comment">// If you want to print in browser&#x27;s console, we use print_r</span></span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  <span class="comment">// if you want the variable data types as well use var_dump</span></span><br><span class="line">  <span class="variable">$stringVar</span> = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="variable">$stringVar</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>9. Objective-C</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        NSLog(@&quot;Hello World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>10. SQL</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">PRINT <span class="string">&#x27;Hello World&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>11. Ruby</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>12. MATLAB</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fprintf ( <span class="number">1</span>, <span class="string">&#x27;Hello, world!&#x27;</span> );</span><br><span class="line"></span><br><span class="line">quit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/posts/77cd4175.html"/>
      <url>/posts/77cd4175.html</url>
      
        <content type="html"><![CDATA[<h4 id="前段时间简单学了点前端，想着搞个个人博客玩一玩"><a href="#前段时间简单学了点前端，想着搞个个人博客玩一玩" class="headerlink" title="前段时间简单学了点前端，想着搞个个人博客玩一玩"></a>前段时间简单学了点前端，想着搞个个人博客玩一玩</h4><h4 id="一开始用的云服务器，但是实在太贵了"><a href="#一开始用的云服务器，但是实在太贵了" class="headerlink" title="一开始用的云服务器，但是实在太贵了"></a>一开始用的云服务器，但是实在太贵了</h4><h4 id="然后就用了GitHub-Pages"><a href="#然后就用了GitHub-Pages" class="headerlink" title="然后就用了GitHub Pages"></a>然后就用了<strong>GitHub Pages</strong><img src="https://s21.ax1x.com/2025/01/28/pEVMdvn.jpg" style="zoom: 25%;" /></h4><h4 id="使用hexo框架，搭配butterfly主题"><a href="#使用hexo框架，搭配butterfly主题" class="headerlink" title="使用hexo框架，搭配butterfly主题"></a>使用<strong>hexo</strong>框架，搭配<strong>butterfly</strong>主题</h4><h4 id="以后可能不定期更新一些拍的照片或者做的有趣小玩意（如果我没有忘了的话"><a href="#以后可能不定期更新一些拍的照片或者做的有趣小玩意（如果我没有忘了的话" class="headerlink" title="以后可能不定期更新一些拍的照片或者做的有趣小玩意（如果我没有忘了的话"></a>以后可能不定期更新一些拍的照片或者做的有趣小玩意（如果我没有忘了的话<img src="https://s21.ax1x.com/2025/01/28/pEVMgC4.jpg"></h4><p>P.S.右边那个天气预报显示的天气似乎有点问题，修了好久也没搞好</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/posts/7a6a6b5a.html"/>
      <url>/posts/7a6a6b5a.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"Midori`Blog","short_name":"Midori`Blog","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Photography</title>
      <link href="/Photography/index.html"/>
      <url>/Photography/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="2024年度照片-虽然是在2025年1月拍的"><a href="#2024年度照片-虽然是在2025年1月拍的" class="headerlink" title="2024年度照片(虽然是在2025年1月拍的"></a>2024年度照片(虽然是在2025年1月拍的</h1><h3 id="虽然不是很成功的一次拍摄，距离太远，雾太浓，锐化拉满了导致出现了奇怪的白边，搞了半天没弄得掉，干脆留着吧-悲"><a href="#虽然不是很成功的一次拍摄，距离太远，雾太浓，锐化拉满了导致出现了奇怪的白边，搞了半天没弄得掉，干脆留着吧-悲" class="headerlink" title="虽然不是很成功的一次拍摄，距离太远，雾太浓，锐化拉满了导致出现了奇怪的白边，搞了半天没弄得掉，干脆留着吧(悲"></a>虽然不是很成功的一次拍摄，距离太远，雾太浓，锐化拉满了导致出现了奇怪的白边，搞了半天没弄得掉，干脆留着吧(悲</h3><p>响啊！很响啊！(指火箭的声音)</p><p>2025.1.19</p><p><img src="https://s21.ax1x.com/2025/01/28/pEVMZND.jpg"></p><p><img src="https://s21.ax1x.com/2025/01/28/pEVMPj1.jpg"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
